<<<<<<< .mine
interface iAtlas
{ // public $atlasCodes;                                                        // $atlasCodes[code]=AtlasName
     public function calculateAtlasPage($atlas, $ra, $decl);                    // calculates the atlas page for the ra,decl in atlas
  // private function calculateMilleniumPage($ra, $decl);
	// private function calculateNewUranometriaPage($ra, $decl);
  // private function calculatePocketSkyAtlasPage($ra, $decl);
  // private function calculateSkyAtlasPage($ra, $decl);
  // private function calculateTakiPage($ra, $decl);
  // private function calculateTorresBPage($ra, $decl);
  // private function calculateTorresBCPage($ra, $decl);
  // private function calculateTorresCPage($ra, $decl);
  // private function calculateUranometriaPage($ra, $decl)
}
interface iContrast
{ // private function calcSubroutine($x, $SBObj, $minObjArcmin, $maxObjArcmin, $maxLog, $logObjContrast)// This function should not be used. Only needed for the calculations
     public	 function calculateContrast($objMag, $SBObj, $minObjArcmin, $maxObjArcmin);
     public  function calculateLimitingMagnitudeFromSkyBackground($initBB);
     public  function calculateSkyBackgroundFromLimitingMagnitude($limMag);
}
interface iDatabase
{ public function __constructor();
  public function newlogin();                                                   // Should be removed when code cleanup finishes, code should go into the constructor
	public function login();                                                      // Should be removed when code cleanup finishes
	public function logout();                                                     // Should be removed when code cleanup finishes
	public function execSQL($sql);                                                // Executes an SQL statement, returns nothing
	public function selectKeyValueArray($sql,$key,$value);                        // Executes an SQL statement, inteded to be a select, but it is not checked, it returns an array with the $key field as key and $value field as value of all the records, or an empty array if recordset is empty
	public function selectRecordset($sql);                                        // Executes an SQL statement, it returns the mysql_query object
	public function selectSingleArray($sql,$name);                                // Executes an SQL statement, inteded to be a select, but it is not checked, it returns an array with the $name field of all the records, or an empty array if recordset is empty
	public function selectSingleValue($sql,$name,$nullvalue='');                  // Executes an SQL statement, inteded to be a select, but it is not checked, it returns the $name field of the first record, or $nullvalue if recordset is empty
}
interface iEyepiece
{ public  function addEyepiece($name, $focalLength, $apparentFOV);                   // adds a new eyepiece to the database. The name, focalLength and apparentFOV should be given as parameters. 
  public  function getAllEyepiecesIds($id);                                          // returns a list with all id's which have the same name as the name of the given id
  public  function getEyepieceObserverPropertyFromName($name, $observer, $property); // returns the property for the eyepiece of the observer
  public  function getEyepiecePropertiesFromId($id);                                 // returns the properties of the eyepiece with id in an array(propertyname)=propertyvalue
  public  function getEyepiecePropertyFromId($id,$property,$defaultValue='');        // returns the property of the given eyepiece
  public  function getEyepieceUsedFromId($id);                                       // returns the number of times the eyepiece is used in observations
  public  function getSortedEyepieces($sort,$observer="");                           // returns an array with the ids of all eyepieces, sorted by the column specified in $sort
  public  function setEyepieceProperty($id,$property,$propertyValue);                // sets the property to the specified value for the given eyepiece
  public  function validateDeleteEyepiece();                                         // validates and deletes an eyepiece
  public  function validateSaveEyepiece();                                           // validates and saves an eyepiece and returns a message 
} 
interface iFilters
{public  function addFilter($name, $type, $color, $wratten, $schott);                    // adds a new filter to the database. The name, type, color, wratten and schott should be given as parameters. 
 public  function getAllFiltersIds($id);                                                 // returns a list with all id's which have the same name as the name of the given id
 public  function getEchoColor($color);                                                  // returns the color in the activated language
 public  function getEchoListColor($color);                                              // returns the color in list format for the activated language
 public  function getEchoListType($type);                                                // returns the type in list format for the activated language 
 public  function getEchoType($type);                                                    // returns the type in the activated language
 public  function getFilterObserverPropertyFromName($name, $observer, $property);        // returns the property for the filter of the observer
 public  function getFilterPropertiesFromId($id);                                        // returns the properties of the filters with id
 public  function getFilterPropertyFromId($id,$property,$defaultValue='');               // returns the property of the given filter
 public  function getFilterUsedFromId($id);                                              // returns the number of times the eyepiece is used in observations
 public  function getSortedFilters($sort, $observer = "");                               // returns an array with the ids of all filters, sorted by the column specified in $sort
 public  function setFilterProperty($id,$property,$propertyValue);                       // sets the property to the specified value for the given filter
 public  function validateDeleteFilter();                                                // validates and deletes a filter
 public  function validateSaveFilter();                                                  // validates and saves a filter and returns a message 
}
interface iInstruments
{ public  function addInstrument($name, $diameter, $fd, $type, $fixedMagnification, $observer);    // adds a new instrument to the database. The name, diameter, fd and type should be given as parameters. 
  public  function getAllInstrumentsIds($id);                                                      // returns a list with all id's which have the same name as the name of the given id
  public  function getInstrumentEchoType($instrumentType);                                         // returns the text corresponding to a certain instrument type
  public  function getInstrumentEchoListType($type);                                               // returns the html code for a list containing the Instrument types, with the $type selected
  public  function getInstrumentId($name, $observer);                                              // returns the id for this instrument
  public  function getInstrumentPropertyFromId($id,$property,$defaultValue='');                    // returns the specified property for instrument id                    
  public  function getInstrumentUsedFromId($id);                                                   // returns the number of times the instrument is used in observations
  public  function getObserverFromInstrument($id);                                                 // returns the observerid for this instrument
  public  function getSortedInstruments($sort,$observer="");                                       // returns an array with the ids of all instruments, sorted by the column specified in $sort
  public  function getSortedInstrumentsList($sort,$observer="");                                   // returns an array with the ids of all instruments as key, and the name as value, sorted by the column specified in $sort
  public  function setInstrumentProperty($id,$property,$propertyValue);                            // sets the property to the specified value for the given instrument
  public  function validateDeleteInstrument();                                                     // validates and deletes the instrument with id
  public  function validateSaveInstrument();                                                       // validates and saves the instrument
}
interface iLenses
{ public  function addLens($name, $factor);                                      // adds a new lens to the database. The name and the factor should be given as parameters. 
  public  function getAllFiltersIds($id);                                        // returns a list with all id's which have the same name as the name of the given id
  public  function getLensObserverPropertyFromName($name, $observer, $property); // returns the property for the eyepiece of the observer
  public  function getLensPropertyFromId($id,$property,$defaultValue='');        // returns the property of the given lens
	public  function getSortedLenses($sort, $observer = "");                       // returns an array with the ids of all lenses, sorted by the column specified in $sort
  public  function setLensProperty($id,$property,$propertyValue);                // sets the property to the specified value for the given lens
  public  function getLensUsedFromId($id);                                       // returns the number of times the lens is used in observations
  public  function validateDeleteLens();                                         // validates and removes the lens with id
  public  function validateSaveLens();                                           // validates and saves a lens and returns a message 
}
interface iLocations
{ public  function addLocation($name, $longitude, $latitude, $region, $country, $timezone);                            // adds a new location to the database. The name, longitude, latitude, region and country should be given as parameters. 
  public  function getAllLocationsIds($id);                                                                            // returns a list with all id's which have the same name as the name of the given id
  public  function getCountries();                                                                                     // returns all possible countries
  public  function getDatabaseCountries();                                                                             // returns all countries for which the database of the locations is available
  public  function getLocationId($name, $observer);                                                                    // returns the id for this location
  public  function getLocationPropertyFromId($id,$property,$defaultValue='');
  public  function getLocations();                                                                                     // returns an array with all locations
  public  function getLocationsFromDatabase($name, $country);                                                          // returns an array with all information about the location where the name equals the given name in the given country (given the country string - e.g. Belgium).
  public  function getLocationUsedFromId($id);                                                                         // returns the number of times the location is used in observations
  public  function getSortedLocations($sort,$observer="");                                                             // returns an array with the ids of all locations, sorted by the column specified in $sort
  public  function getSortedLocationsList($sort, $observer = "");                                                      // returns an array with the ids of all locations, sorted by the column specified in $sort. Locations withthe same name are adapted by adding the province.
  public  function setLocationProperty($id,$property,$propertyValue);                                                  // sets the property to the specified value for the given location  public  function validateDeleteLocation();                                                                           // deletes teh location of the list with locations
  public  function validateDeleteLocation();
  public  function validateSaveLocation();
}





=============================================================================================================================================================================================
=======
interface iObject
{ public  function addDSObject($name, $cat, $catindex, $type, $con, $ra, $dec,$mag, $subr, $diam1, $diam2, $pa, $catalogs, $datasource); // Add a deepsky object in all detail
//private function calcContrastAndVisibility($object,$showname,$magnitude,$SBobj,$diam1,$diam2,&$contrast,&$contype,&$popup,&$prefMag);
//private function calculateSize($diam1, $diam2);                               // Construct a string from the sizes
  public  function getAllInfoDsObject($name);                                   // Returns all information of an object
  public  function getAlternativeNames($name);
  public  function getCatalogs();                                               // returns a list of all different catalogs
  public  function getCatalogsAndLists();
  public  function getConstellations();                                         // returns a list of all different constellations
//private function getContainsNames($name);
  public  function getDsObjectName($name);                                      // returns the name when the original or alternative name is given.
  public  function getDsObjectTypes();                                          // returns a list of all different types
  public  function getDsoProperty($theObject,$theProperty, $default='');        // returns the property of the object, or default if not found
  public  function getDSOseen($object);                                         // Returns the getSeen result, encoded to a href that shows the seen observations
  public  function getExactDsObject($value, $cat='', $catindex='');             // returns the exact name of an object
  public  function getLikeDsObject($value, $cat='', $catindex='');              // returns the exact name of an object
  public  function getNearbyObjects($objectname, $dist);                        // returns an array with nearby objects
  public  function getNumberOfObjectsInCatalog($catalog);                       // returns the number of objects in the catalog given as a parameter
  public  function getObjectFromQuery($queries,$exact=0,$seen="D",$partof=0);
  public  function getObjectsFromCatalog($cat);
  public  function getObjectVisibilities(&$obs);                                // completes an objects array containing already the object characteristics with the visibility and magnifications parameters
//private function getPartOfNames($name);
  public  function getPartOfs($objects);
  public  function getSeen($object);                                            // Returns -, X(totalnr) or Y(totalnr/personalnr) depending on the seen-degree of the objects
//private function getSeenLastseenLink($object,&$seenlink,&$lastseenlink);      // Returns the -/X(nr)/Y(nr) seen link to all observations of object, and the date last seen link, linking to all user observations inversely sorted by date
  public  function getSeenObjectDetails($obs, $seen="D");                       // Fills in all object details and seen characteristics for an array of objects Obj[key]=array(position,name,optional descritpion)
//private function getSize($name);                                              // Returns the size of the object
  public  function newAltName($name, $cat, $catindex);                          // ADMIN FUNCTION, Add a new Altname in objectnames for this object
  public  function newName($name, $cat, $catindex);                             // ADMIN FUNCTION, Set a new name for a DS object, and adapt all observations, objectnames, partofs and list occurences
  public  function newPartOf($name, $cat, $catindex);                           // ADMIN FUNCTION, Adds a new partof entry for $name in the partsof table, making it part of $cat $index
//private function prepareObjectsContrast($doLogin=false);                      // internal procedure to speed up contrast calculations
  public  function removeAltName($name, $cat, $catindex);                       // ADMIN FUNCTION, Remove the alternative name $cat $index from the objectnames of $name
  public  function removeAndReplaceObjectBy($name, $cat, $catindex);            // ADMIN FUNCTION, Remove the object after replacing it in the observations, partofs, lists by the object $cat $index
  public  function removePartOf($name, $cat, $catindex);                        // ADMIN FUNCTION, Remove the partof entry for $name from the partsof table, so that $name is no longer a part of $cat $index
  public  function setDsObjectAtlasPages($name);                                // sets the different atlas pages for an object (e.g. after changing its coordinates)
  public  function setDsObjectSBObj($name);                                     // sets the SBObj for an object, based on its mag and diam1 & 2, e.g. after changing its diam or mag.
  public  function setDsoProperty($name,$property,$propertyValue);              // sets the property to the specified value for the given object
  public  function showObject($object,$zoom=30);                                // shows the characteristics of a single object
  public  function showObjects($link, $min, $max, $ownShow='', $showRank=0);    // ownShow => object to show in a different color (type3) in the list showRank = 0 for normal operation, 1 for List show, 2 for top objects
  public  function sortObjects($objectList, $sort, $reverse=false);             // Sort the array of objectList on the $sort field, and in second order on the showname field 
}

>>>>>>> .r1182
This document is very outdated!!!! Should be updated or removed!

This document list all classes and funtions of these classes.

lib/database.php : 
  - login()		Logs in into the database
  - logout()		Logs out from the database

lib/instruments.php :
  - addInstrument($name, $diameter, $fd, $type)
			Adds a new instrument to the database. The name, 
			diameter, fd and type should be given as parameters.
  - deleteInstrument($id)
			Removes the instrument with id = $id
  - getDiameter($id)
			Returns the diameter of the given instrument
  - getFd($id)
			Returns the Fd of the given instrument
  - getFocalLength($id)
			Returns the focal length of the given instrument
  - getInstruments()
			Returns an array with all instruments
  - getName($id)
			Returns the name of the given instrument
  - getSortedInstruments($sort)
			Returns an array with the ids of all instruments,
			sorted by the column specified in $sort
  - getType($id)
			Returns the type of the given instrument
  - setDiameter($id, $diameter)
			Sets a new diameter for the given instrument
  - setFd($id, $fd)
			Sets a new fd for the given instrument
  - setFocalLength($id, $focalLength)
			Sets the focal length for the given instrument
  - setName($id, $name)
			Sets the name for the given instrument
  - setType($id, $type)
			Sets the type for the given instrument
  - showInstruments()
			Prints a table showing all instruments.


lib/language.php :
  - getLanguages()
			Returns an array with all available languages

lib/location.php :
  - addLocation($name, $longitude, $latitude, $region, $country, $timezone)
			Adds a new location to the database. The name, 
			longitude, latitude, region, country and timezone (in hours) 
			should be given as parameters
  - deleteLocation($id)
			Removes the location with id = $id
  - getCountries()
			Returns all countries
  - getDatabaseCountries()
			Returns all countries for which the database of the 
                        locations is available
  - getLocations()
			Returns an array with all locations
  - getLocationsFromDatabase($name, $country)
			Returns an array with all information about the 
			location where the name equals the given name in the 
                        given country (given the country string - e.g. Belgium)
  - getCountry($id)
			Returns the country of the given id
  - getLatitude($id)
			Returns the latitude of the given id
  - getLongitude($id)
			Returns the longitude of the given id
  - getName($id)
			Returns the name of the given id
  - getRegion($id)
			Returns the region of the given id
  - getSortedLocations($sort)
			Returns an array with the ids of all locations, sorted
			by the column specified in $sort
  - getTimezone($id)
			Returns the timezone of the given id
  - setCountry($id, $country)
			Sets a new country for the location with id = $id
  - setLatitude($id, $latitude)
			Sets a new latitude for the location with id = $id
  - setLongitude($id, $longitude)
			Sets the longitude for the location with id = $id
  - setName($id, $name)
			Sets the name for the location with id = $id
  - setRegion($id, $region)
			Sets the region for the location with id = $id
  - setTimezone($id, $timezone)
			Sets the timezone for the location with id = $id
  - showLocations()
			Prints a table showing all locations.

lib/objects.php :
  - addObject($name, $alternative_name, $type, $con, $ra, $dec, $mag, $subr, $size, $pa, $catalogs, $datasource)
			Adds a new object to the database. The name, alternative
			name, type, constellation, right ascension, declination,
			magnitude, surface brightness, size, position angle and
 			info about the catalogs should be given as parameters.
			$datasource describes where the data comes from eg : 
			SAC7.2 or DeepskyLogUser
  - calculateMilleniumPage($ra, $decl)
			Calculates the page from the Millenium Star atlas of 
			the object
  - calculateNewUranometriaPage($ra, $decl)
			Calculates the new uranometriapage of the object
  - calculateSkyAtlasPage($ra, $decl)
			Calculates the page from the Sky Atlas of the object
  - calculateUranometriaPage($ra, $decl)
			Calculates the old uranometriapage of the object
  - deleteObject($name)
			Removes the object with name = $name
  - getAllInfo($name)
 			Returns all information of an object
  - getAlternativeName($name)
			Returns the alternative name of the object
  - getCatalogs($name)
			Returns the catalogs of the object
  - getCatalogs()
			Returns a list of all different catalogues
  - getConstellation($name)
			Returns the constellation of the object
  - getConstellations()
			Returns a list of all different constellations
  - getDatasource($name)
			Returns the datasource of the object
  - getDeclination($name)
			Returns the declination of the object
  - getExactObject($value)
                        Returns an array with the name of the object where
                        the databasefield has the given name.
  - getMagnitude($name)
			Returns the magnitude of the object
  - getMilleniumPage($name)
			Returns the page from the Millenium Star atlas of the
			object
  - getName($alternative_name)
			Returns the name when the alternative name is given.
  - getNameList($alternative_name)
                        Returns a list of names when a part of the alternative 
                        name is given.
  - getNewUranometriaPage($name)
			Returns the new uranometriapage of the object
  - getObjects()
			Returns an array with the names of all objects
  - getObjectFromQuery($queries)
			Returns an array with the names of all objects where
			the queries are defined in an array.
			An example of an array :
		 	$q = array("name" => "NGC", "type" => "GALXY", 
			"constellation" => "AND", "minmag" => "12.0", 
			"maxmag" => "14.0", "minsubr" => "13.0",
            		"maxsubr" => "14.0", "minra" => "0.3", "maxra" => "0.9",
            		"mindecl" => "24.0", "maxdecl" => "30.0", 
			"urano" => "111", "uranonew" => "111", "sky" => "11", 
			"msa" => "222");
  - getObserved($name)
			Returns +1 if the object is already observed, -1 if 
			the object is not yet observed
  - getObservedbyUser($name, $observerid)
			Returns +1 if the object is already observed by the
 			given user, -1 if the object is not yet observed
  - getPositionAngle($name)
			Returns the position angle of the object
  - getRA($name)
			Returns the right ascension of the object
  - getSelectedObjects($dbfield, $value)
			Returns an array with the names of all objects where the
			databasefield has the given value.
  - getSize($name)
			Returns the size of the object
  - getSkyAtlasPage($name)
			Returns the page from the Sky Atlas of the object
  - getSortedObjects($sort)
			Returns an array with the names of all objects, sorted 
			by the column specified in $sort
  - getSurfaceBrightness($name)
			Returns the surface brightness of the object
  - getType($name)
			Returns the type of the object
  - getTypes()
			Returns a list of all different types
  - getUranometriaPage($name)
			Returns the old uranometriapage of the object
  - my_array_unique($somearray)
			Returns a unique array, where the keys increment.
  - setAlternativeName($name, $altname)
			Sets a new alternative name for the object.
  - setCatalogs($name, $catalogs)
			Sets the new catalogs for the given object
  - setConstellation($name, $con)
			Sets the constellation of the object
  - setDatasource($name, $datasource)
			Sets the datasource of the object
  - setDeclination($name, $decl)
			Sets a new declination for the object
  - setMagnitude($name, $mag)
			Sets a new magnitude for the object
  - setPositionAngle($name, $pa)
			Sets a new position angle for the given object
  - setRA($name, $ra)
			Sets a new right ascension for the object
  - setSize($name, $size)
			Sets a new size for the given object
  - setSurfaceBrightness($name, $subr)
			Sets a new surface brightness for the given object
  - setType($name, $type)
			Sets a new type for the object
  - showObjects()
			Prints a table showing all objects.

lib/observations.php :
  - addObservation($objectname, $observerid, $instrumentid, $locationid, 
                   $date, $time, $description, $seeing, $limmag, $visibility)
			Adds a new observation to the database. The name, 
			observerid, instrumentid, locationid, date, time, 
			description, seeing, limiting magnitude and visibility 
			should be given as parameters. The id of the latest observation is returned. 
  - deleteObservation($id)
			Removes the observation with id = $id
  - getAllInfo
			Returns all information of an observation
  - getDate($id)
			Returns the date of the given observation
  - getDescription($id)
			Returns the description of the given observation
  - getInstrumentId($id)
			Returns the id of the instrument of the observation
  - getLimitingMagnitude($id)
			Returns the limiting magnitude of the observation
  - getLocalDate($id)
			Returns the date of the given observation in local time
  - getLocalTime($id)
			Returns the time of the given observation in local time
  - getLocationId($id)
			Returns the location of the observation
  - getNumberOfDifferentObjects()
			Returns the number of different objects observed
  - getNumberOfMessiers($id)
			Returns the number of messier objects seen by the 
                        observer
  - getNumberOfObservationsThisYear() 
			Returns the number of observations this year
  - getNumberOfObjects($id)
			Returns the number of different objects seen by the
			observer
  - getNumberOfObservations() 
			Returns the total number of observations
  - getObjectId($id) 
			Returns the name of the observed object
  - getObservationFromQuery($queries, $sort = "", $exactmatch = "1")
			Returns an array with the names of all observations
			where the queries are defined in an array.
				An example of an array :
			$q = array("object" => "NGC 7293", "observer" => "wim",
           			"instrument" => "3", "location" => "24",
           			"mindate" => "20040512", "maxdate" => "20040922");
  - getObservations()
			Returns an array with all observations
  - getObserverId($id)
			Returns the name of the observer
  - getPopularObservations()
			Returns the number of observations of the objects
  - getPopularObservers()
                        Returns the number of observations of the observers
  - getSeeing($id)
			Returns the seeing of the observation
  - getSortedObservations($sort)
			Returns an array with the ids of all observations,
			sorted by the column specified in $sort
  - getTime($id)
			Returns the time of the given observation
  - getVisibility($id)
			Returns the visibility of the given observation
  - setDate($id, $date)
			Sets the date for the given observation
  - setDescription($id, $description)
			Sets the description for the given observation
  - setInstrumentId($id, $instrument)
			Sets the id of the instrument for the given observation
  - setLimitingMagnitude($id, $limmag)
			Sets the limiting magnitude for the given observation
  - setLocalDateAndTime($id, $date, $time)
                        Sets the date and time for the given observation in the 
                        datebase when the time is given in local time
  - setLocationId($id, $location)
			Sets the location for the given observation
  - setObjectId($id, $name)
			Sets a new name of the observed object
  - setObserverId($id, $observer)
			Sets a new observer for the given observation
  - setSeeing($id, $seeing)
			Sets the seeing for the given observation
  - setTime($id, $time)
			Sets the time for the given observation
  - setVisibility($id, $visibility)
			Sets the visibility of the given observation
  - showObservations()
			Prints a table showing all observations.


lib/observer.php :
  - addObserver($id, $name, $firstname, $email, $password)	
                        Adds a new observer to the database
  - checkPassword($id, $passwd)
			Returns true if the password for the given id is the 
			given password, otherwise false. 
  - deleteObserver($id)
                        Removes observer $id
  - getAdministrators()
                        Returns an array with all ids of the administrators
  - getClub($id)
                        Returns the club of the observer with id = $id
  - getEmail($id)
                        Returns the email of the observer with id = $id
  - getFirstName($id)
                        Returns the first name of the given id
  - getLanguage($id)
                        Returns the language of the given id
  - getListOfInstruments()
			Returns a list of all StandardInstruments of all
			observers
  - getListOfLocations()
			Returns a list of all StandardLocations of all observers
  - getName($id)
                        Returns the name of the given id
  - getNumberOfObservations($observerid)
                        Returns the number of observations of the given
                        observerid
  - getObservers()
                        Returns an array with the ids of all observers
  - getObserversFromClub($club)
			Returns the id's of all observers from a given 
                        club in a sql-query to be used.
  - getPassword($id)
			Returns the password of the observer with id = $id
  - getRank($observer)
			Returns the number of observations of the given observer
  - getRole($id)
                        Returns the role of the observer with id = $id
  - getSortedObservers($sort)
                        Returns an array with the ids of all observers, sorted
                        by the column specified in $sort
  - getStandardAtlas($id)
			Returns the standard atlas of the given id.
  - getStandardLocation($id)
                        Returns the standard location of the given id
  - getStandardTelescope($id)
                        Returns the standard telescope of the given id
  - setClub($id, $club)
			Sets a new club for the observer with 
                        club = $club
  - setEmail($id, $email)
                        Sets a new email for the observer with id = $id
  - setFirstName($id, $firstname)
                        Sets a new first name for the observer with id = $id
  - setLanguage($id, $language)
                        Sets the language for the given id
  - setName($id, $name)
                        Sets a new name for the observer with id = $id
  - setPassword($id, $pwd)
                        Sets a new password for the observer with id = $id
  - setRole($id, $role)
                        Sets a new role for the observer with id = $id
  - setStandardAtlas($id, $location)
			Sets a new standard atlas for the given observer
  - setStandardLocation($id, $location)
                        Sets a new standard location for the given observer
  - setStandardTelescope($id, $telescope)
                        Sets a new standard telescope for the given observer
  - showObservers()	
                        Shows all observers in a table
  - validateObserver($id, $role)
			Validates the user with the given id and gives the user
			 the given role

lib/util.php : Collection of usefull functions
  - printListHeader($step)
			Prints the list header of $list if the list has more 
			than $step entries. The first item from the list that 
			should be shown is $min.
			All numbers use the given link. An array is given back,
			with the min and max value. Example :
       list($min, $max) = $util->printListHeader($obs, $link, $_GET['min'], 25, 1111);
  - array_slice_key($array, $offset, $len=-1)
                        Array slice, but uses also keys.

lib/setup/databaseInfo.php : The user must change the database name and
                             location here!

